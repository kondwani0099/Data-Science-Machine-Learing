# -*- coding: utf-8 -*-
"""market sales

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13mdEIznH3WTJ6BcKf-Ie6blZBPVWFqIc

Get useful insights in the data from market sales
"""

# the libraries to use
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""Show the data in the table"""

from google.colab import drive
drive.mount('/content/drive')
import os
os.chdir(r"/content/drive/My Drive/")

# Path to the CSV file in Google Drive
csv_file_path = '/content/drive/My Drive/lessons/supermarket_sales.csv'

# Read data into a DataFrame
df = pd.read_csv(csv_file_path)

# Display the DataFrame
df

"""Most used payment method"""

# Extract the 'Payments' column
payments_data = df['Payment']

# Count the occurrences of each payment type
payment_counts = payments_data.value_counts()

# Plot a pie chart
plt.figure(figsize=(8, 8))
plt.pie(payment_counts, labels=payment_counts.index, autopct='%1.1f%%', startangle=90)
plt.title('Usage of Payments')
plt.show()

# Extract the 'Gender' column
gender_data = df['Gender']

# Count the occurrences of each gender
gender_counts = gender_data.value_counts()

# Plot a pie chart for gender distribution
plt.figure(figsize=(8, 8))
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=90)
plt.title('Gender Distribution')
plt.show()

# Group by 'Product Line' and sum the 'Gross Income' for each product line
product_line_income = df.groupby('City')['gross income'].sum()

# Plot a bar chart for gross income by product line
plt.figure(figsize=(10, 6))
product_line_income.plot(kind='bar', color='skyblue')
plt.title('Gross Income by City')
plt.xlabel('City')
plt.ylabel('Gross Income')
plt.show()

# Group by 'Product Line' and sum the 'Gross Income' for each product line
product_line_income = df.groupby('Product line')['gross income'].sum()

# Plot a bar chart for gross income by product line
plt.figure(figsize=(10, 6))
product_line_income.plot(kind='bar', color='skyblue')
plt.title('Gross Income by Product Line')
plt.xlabel('Product Line')
plt.ylabel('Gross Income')
plt.show()

# Find the branch with the overall highest rating
highest_rated_branch = df.loc[df['Rating'].idxmax(), 'Branch']
highest_rating = df['Rating'].max()

# Filter the DataFrame to show all other branches
other_branches_df = df[df['Branch'] != highest_rated_branch]

# Display results
print(f"The branch with the overall highest rating is {highest_rated_branch} with a rating of {highest_rating}")

# Find the three branches with the highest ratings

sorted_df = df.sort_values(by='Rating', ascending=False)
top_10_branches = sorted_df.head(10)[['Branch', 'Rating']]


# Display results
print("Top 3 branches:")
print(top_10_branches)

# Create a correlation matrix
# correlation_matrix = df.corr()
correlation_matrix = df.corr(numeric_only=True)

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()